ライブラリについて

20091014-2 by ageha

/*----------------------------------------------------------------------
 lib.s
----------------------------------------------------------------------*/

浮動小数点数に対するライブラリ。

 * fless
 * fispos
 * fisneg
 * fhalf
 * fsqr
 * fabs
 * fneg
 * floor (要改造)
 * int_to_float
 * float_to_int
 * read_int
 * read_float
 * write_int
 * write_float

----
 * 実装メモ

http://www.assembla.com/spaces/cpu2008/documents/ckK6l4YZir3AGHab7jnrAJ/download/fpu.pdf
ここ参照。nu さんの浮動小数点数ドキュメント。あまりにも神がかっています。
これも参照しつつ、またライブラリもいろいろ見直したり実装したりする予定。


----
 * int_to_float

8388608.0 = 2^23 の 1ulp が 1.0 である事をを利用する。

・負の場合
正に直して求めて負にする。

・i < 8388608 の場合
8388608.0 のビット表現は 0x4b000000 であるので、0x4b000000 + i は、8388608.0 + (float)i のビット表現である。
そこから fsub で 8388608.0 を引いてあげれば、求めるもの。

・i >= 8388608 の場合
i = q * 8388608 + r なる q, r を求めて、int_to_float(q * 8388608) と int_to_float(r) を faddする。


----
 * float_to_int

int_to_float の逆をたどる。


----
 * floor

今の実装では、 int_to_float * float_to_int と超適当。
上の nu さんドキュメントを参照しながら、そのうち正確なのを組む。




/*----------------------------------------------------------------------
  ml/lib.ml
----------------------------------------------------------------------*/

とりあえず ML で書いてみた的なものです。

 * mysin
 * mycos
 * myatan
 * mysqrt


----
 * 実装メモ

三角関数は CORDIC, sqrt はニュートン法を使っています。


----
 * mysin
 * mycos
 * mytan

CORDICとかいうやつです。過去のとかWikipedia見ながら実装。


----
 * mysqrt

ニュートン法とかいうやつです。
が、sqrt(x) より 1 / sqrt(x) の方が割り算でなくていいよねという噂を聞いてそっちで適当に実装してます。
のくせに、x < 1.0 の時に 1 / sqrt(x) がでかくなるからあー適当に場合分けしよってなってます。だめね。
とりあえずな感じで。

----
 * test

makeすれば ./test で適当に実験できます。
